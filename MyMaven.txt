Для установки: качаем maven c maven.apache.org; распаковываем архив, закидываем его в корень диска с. Идем в переменные среды. Смотрим там: JAVA_HOME (по идее должна уже быть, раз стоит Java), MAVEN_HOME прописываем вручную, указав путь к Maven: с:\apache-maven-3.6.3; дописываем в Path: %JAVA_HOME%\bin (отделяем от других переменных точкой с запятой (;)).
Идем в командную строку и проверяем работоспособность:
set mave - показывает наличие и версию maven;
set ja - показывает наличие и версию java;
set pa - показывает весь Path в переменных среды (environment variables)
mvn --version - такая проверочка, работает ли maven. 
Вообще все команды maven задаются в командной строке (command line) через команду mvn


1) Переходим в тотал коммандере в нужную нам директорию, где планируем создать новый проект с помощью maven.
2) Открываем там командную строку и вбиваем туда команду mvn  с последующими архетипами.

Архетип к примеру:
	mvn archetype:generate -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4

Вообще их можно найти в гугле на сайте maven.apache.org/archetypes
Дело в том, что их довольно много.Какой именно нужен - потом, может, разберемся.

GroupID - это та первая инфа, что просит maven. Это, грубо говоря, отдел организации, который сидит над данным проектом. Например: org.apache.maven или com.epam.automation.

ArtifactID - это конкретно уже название проекта. Например: maven-demo (! все буквы в нижнем регистре, если их нужно разделить, используем дефис(-)).

Дальше maven спрашивает версию, можно поставить по дефолту, нажав enter.

Спрашивает название пакетов, где будут находиться классы. В принципе, оно будет совпадать с groupID.

Папка target в директории проекта появляется после какой-то сборки проекта (например, мы провели mvn test). Там хранится вся инфа о последней сборке. Эта папка перезаписывается при каждой сборке.
Чтобы удалить папку target нужно использовать команду mvn clean. Она подчищает ненужные файлы.

mvn test - запускает имеющиеся в проекте тесты.

Можно сразу в ком.строке указать команду mvn clean test. Это значит, что maven сразу почистит,  и тут же на свеженькую запустит тесты.

mvn package - запакует приложение.
mvn install - установит локально приложение (в случае, если все тесты прошли успешно и это вообще приложение)
mvn deploy - эт чтобы задеплоить куда-то там. Что это, пока не ясно.

Dependencies (зависимости). Это такие штуки, от которых зависит наш проект. В нем, как я понял, указаны тесты для проверки проекта. Чтобы выбрать нужные тесты, идем на веб-страницу https://search.maven.org, пишем в поисковик, например junit (название тестов, которые меня на данный момент интересуют), выскакивает список со всеми junit тестами. Выбирай, что надо. Открываем. В правом верхнем углу кусочек кода - вставляем его в проекте в dependencies в pom файле, idea сама скачает нужный тест. Все библиотеки тестов скачиваются на локальную машину в папку Users/username/.m2/repository. 

Полезные ссылки 
Презентация тренинга: DevTestOps-Maven_build_tool.pdf
Официальный сайт проекта Maven: http://maven.apache.org/
Центральный maven репозиторий для поиска библиотек: https://search.maven.org/